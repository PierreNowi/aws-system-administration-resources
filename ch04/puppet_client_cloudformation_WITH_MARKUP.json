{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Example Puppet client stack",
    "Inputs": {<co id="client_inputs_co"/>
        TODO
    },

    "Parameters" : {
    	"KeyName": {
    		"Description" : "EC2 KeyPair name",
    		"Type": "String",
    		"MinLength": "1",
    		"MaxLength": "255",
    		"AllowedPattern" : "[\\x20-\\x7E]*",
    		"ConstraintDescription" : "can contain only ASCII characters."
    	},
    	"AMI" : {
    		"Description" : "OpenVPN AMI ID",
    		"Type": "String"
    	},
    	"PuppetMasterDNS" : {
    		"Description" : "DNS name of the Puppet master instance",
    		"Type": "String"
    	},
    	"PuppetMasterSecurityGroup" : {
    		"Description" : "Name of the Puppet master Security Group",
    		"Type": "String"
    	},
    },

    "Resources": {
        "PuppetClientInstance": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "UserData": {<co id="client_userdata_co"/>
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "/opt/aws/bin/cfn-init --region ", { "Ref": "AWS::Region" },  " -s ",
                                { "Ref": "AWS::StackName" }, " -r PuppetMasterInstance ",
                                " --access-key ", { "Ref": "CFNKeys" },
                                " --secret-key ", { "Fn::GetAtt": [ "CFNKeys", "SecretAccessKey" ] }, "\n",
                                " puppet agent --log /tmp/puppet.log --server ", { "Ref": "PuppetMasterDNS" }, "\n"
                            ]
                        ]
                    }
                },
                "KeyName": "<replaceable>your-ssh-key-pair-name</replaceable>",
                "SecurityGroups": [
                    {
                        "Ref": "TODO PuppetMasterGroupINPUT"
                    }
                ],
                "InstanceType": "t1.micro",
                "ImageId": "<replaceable>linux-ami-id</replaceable>"
            },
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "files": {<co id="client_config_files_co"/>
                            "/etc/puppet/puppet.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[main]\n",
                                            " logdir=/var/log/puppet\n",
                                            " rundir=/var/run/puppet\n",
                                            " ssldir=$vardir/ssl\n",
                                            " pluginsync=true\n",
                                            "[agent]\n",
                                            " classfile=$vardir/classes.txt\n",
                                            " localconfig=$vardir/localconfig\n"
                                        ]
                                    ]
                                },
                                "owner": "root",
                                "group": "root",
                                "mode": "000644"
                            }
                        },
                        "packages": {<co id="client_packages_co"/>
                            "rubygems": {
                                "json": []
                            },
                            "yum": {
                                "gcc": [],
                                "rubygems": [],
                                "ruby-devel": [],
                                "make": [],
                                "puppet": []
                            }
                        },
                        "services": {<co id="client_services_co"/>
                            "sysvinit": {
                                "puppet": {
                                    "ensureRunning": "true",
                                    "enabled": "true"
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}